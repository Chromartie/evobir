new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
print("found a tree")
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
}
}
all.subtrees[[j]] <- new.trees
}
par(mfcol=c(2,3))
foobar <- all.subtrees[[2]]
for(i in 1:5){plot(foobar[[i]])}
length(s.trees[[size.order[counter]]][3])
s.trees[[size.order[counter]]][3]
length(s.trees[[size.order[counter]]][3])
length(as.vector(s.trees[[size.order[counter]]][3]))
s.trees[[size.order[counter]]][3] -> bar
length(unlist(s.trees[[size.order[counter]]][3]))
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
print("found a tree")
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
}
}
all.subtrees[[j]] <- new.trees
}
par(mfcol=c(2,3))
foobar <- all.subtrees[[2]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[1]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[2]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[3]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[4]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[5]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[9]]
for(i in 1:5){plot(foobar[[i]])}
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
successful <- vector()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
print("found a tree")
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
successful[j] <- T
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
succesful
successful
new.trees <- list()
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
successful <- vector()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
successful[j] <- T
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
par(mfcol=c(2,3))
foobar <- all.subtrees[[1]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[2]]
for(i in 1:5){plot(foobar[[i]])}
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
successful <- vector()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
if(length(unlist(s.trees[[size.order[counter]]][3])) < 15){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
successful[j] <- T
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
}
successful
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
pexp(1:10, rate = 1, lower.tail = TRUE, log.p = FALSE)
pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE)
pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999
min(pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999)
min(which(pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999 == T))
foo <- pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999
min(which(foo == T))
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
input$select <- 3
input <- vector()
input$select <- 3
c("Normal", "Exponential", "Gamma", "Logistic")[input$select]
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
plogis(-200:200, location = 0, scale = 1*0.551328895)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
plogis(-20:20, location = 0, scale = .1*0.551328895)
qlogis(.05, location = 0, scale = .1*0.551328895, lower.tail = TRUE, log.p = FALSE)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
help(abline)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
setwd("~/Desktop/Copy/evobiR/new.method")
data <- read.csv("data.character.csv") #3 columns name, continuous trait, discrete trait
trees <- read.nexus("data.100trees.nex")
library(ape)
trees <- read.nexus("data.100trees.nex")
trees <- trees[1:10]
setwd("~/Desktop/mypack/GIT/evobir/data")
save(trees, file="trees.mite.rda")
save(data, file="data.mite.rda")
library(devtools)
install_github("evobir", username='coleoguy')
install_github("coleoguy/evobir")
library(evobiR)
ViewEvo("wf.model")
ViewEvo("bd.model")
ViewEvo("wf.model")
data(trees)
data(mcmc2)
data(mcmc3)
# 1 tree 100 q-mats 3 states
PPSDiscrete(trees[[1]], MCMC=mcmc3[,2:10], states=c(.5,.2,.3), N=2)
# 10 trees 100 q-mats 3 states
PPSDiscrete(trees, MCMC=mcmc3, states=c(.5,.2,.3), N=10)
warnings()
PPSDiscrete(trees, MCMC=mcmc3, states=c(.5,.2,.3), N=10)
PPSDiscrete(trees, MCMC=mcmc3, states=c(.5,.2,.3), N=10)
# 10 trees 100 q-mats 2 states
PPSDiscrete(trees, MCMC=mcmc2, states=c(.5,.5), N=10)
data(data.mite)
data(trees.mite)
View(data)
AncCond(trees, data, derived.state="haplodiploidy", iterations=100)
AncCond(trees[[1]], data, derived.state="haplodiploidy", iterations=100)
