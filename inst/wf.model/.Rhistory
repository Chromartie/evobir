for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
library(devtools)
install.packages("devtools")
library(devtools)
install_github("evobiR")
help(install_github)
install_github("evobiR", username='coleoguy')
install_git("evobiR", username='coleoguy')
install.packages('LearnBayes')
install.packages('evobiR')
install.packages("ape")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library("evobiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
foo <- data(mite)
data(mite)
load(mite.data)
data(mite.data)
rownames(mite.data)
install.packages("markovjumps")
install.packages("~/Desktop/mypack/example.R.packages/markovjumps.tar.gz", repos = NULL, type = "source")
chromosomes <- 23
ploidy <- 2
results <- vector()
for(i in 1:chromosomes){
results[i] <- chromosomes^ploidy
}
plot(results)
results <- vector()
for(i in 1:chromosomes){
results[i] <- i^ploidy
}
plot(results)
plot(results, lty=1)
plot(results, lty=2)
plot(results, lty=3)
help(plot)
plot(results, type='l')
install_github("evobir", username='coleoguy')
library(devtools)
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
setwd("~/Desktop/Dropbox/SexChromosomes/invertebrates/chrom.evol")
library(ape)
library(geiger)
#here is the tree for the group
order.tree <- read.nexus('../Hymenoptera analysis/october.files/pruned.tre')
plot(order.tree)
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Claudius_pectinicornis"))
fix(node.group1)
getMRCA(order.tree, c("Abia_candens", "Claudius_pectinicornis"))
order.tree$node.label
order.tree
order.tree$node.label<-((length(order.tree$tip)+1):((length(order.tree$tip)*2)-1))
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Claudius_pectinicornis"))
node.group2 <- getMRCA(order.tree, c("Leptogenus_diminuta", "Amblyopone_austra"))
fix(order.tree)
order.tree$node.label
node.group1 <- getMRCA(order.tree, tip=c("Abia_candens", "Claudius_pectinicornis"))
fix(order.tree)
getMRCA(order.tree, tip=c("Abia_candens", "Claudius_pectinicornis"))
tip1 <- c("Abia_candens", "Claudius_pectinicornis")
node.group1 <- getMRCA(order.tree, tip1)
which(order.tree$tip.label == tip1[1])
which(order.tree$tip.label == tip1[2])
tip1 <- c("Abia_candens", "Cladius_pectinicornis")
node.group1 <- getMRCA(order.tree, tip1)
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Cladius_pectinicornis"))
node.group2 <- getMRCA(order.tree, c("Leptogenus_diminuta", "Amblyopone_austra"))
node.group3 <- getMRCA(order.tree, c("Bombus_lucorum", "Axestotrigona_ferrugin"))
node.group4 <- getMRCA(order.tree, c("Aulacidea_hieracii", "Orthopelma_mediator"))
node.group2 <- getMRCA(order.tree, c("Leptogenys_diminuta", "Amblyopone_austra"))
node.group2 <- getMRCA(order.tree, c("Leptogenys_diminuta", "Amblyopone_australis"))
group1 <- (order.tree, node.group1)
group1 <- extract.clade(order.tree, node.group1)
group2 <- extract.clade(order.tree, node.group2)
group3 <- extract.clade(order.tree, node.group3)
node.group3 <- getMRCA(order.tree, c("Bombus_lucorum", "Axestotrigona_ferruginea"))
node.group4 <- getMRCA(order.tree, c("Aulacidea_hieracii", "Orthopelma_mediator"))
group1 <- extract.clade(order.tree, node.group1)
group2 <- extract.clade(order.tree, node.group2)
group3 <- extract.clade(order.tree, node.group3)
group4 <- extract.clade(order.tree, node.group4)
plot(group1, cex=.5)
plot(group2, cex=.5)
plot(group3, cex=.5)
group4 <- extract.clade(order.tree, node.group4)
plot(group4, cex=.5)
data <- read.csv('../Hymenoptera analysis/october.files/pruned.data.csv', as.is=T)
data <- data[,3:5]
row.names(data)<-data[,1]
View(data)
grp1.data <- data[data[,1] %in% group1$tip.label, ]
View(grp1.data)
View(grp1.data)
grp1.data <- data[data[,1] %in% group1$tip.label, 1:2]
View(grp1.data)
grp2.data <- data[data[,1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[,1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[,1] %in% group4$tip.label, 1:2]
plot(group3, cex=.5)
View(grp3.data)
View(grp1.data)
View(data)
grp1.data <- data[data[!is.na(data[,2]),1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[!is.na(data[,2]),1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[!is.na(data[,2]),1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[!is.na(data[,2]),1] %in% group4$tip.label, 1:2]
# we will also get rid of NAs
grp1.data <- data[data[!is.na(data[,2]),1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[!is.na(data[,2]),1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[!is.na(data[,2]),1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[!is.na(data[,2]),1] %in% group4$tip.label, 1:2]
View(grp3.data)
View(data)
grp1.data <- data[data[,1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[,1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[,1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[,1] %in% group4$tip.label, 1:2]
is.na(grp1.data[,2])
grp1.data <- grp1.data[!is.na(grp1.data[,2])]
grp1.data <- grp1.data[!is.na(grp1.data[,2]),]
grp2.data <- grp2.data[!is.na(grp2.data[,2]),]
grp3.data <- grp3.data[!is.na(grp3.data[,2]),]
grp4.data <- grp4.data[!is.na(grp4.data[,2]),]
View(grp2.data)
View(grp4.data)
View(grp1.data)
fix(group1)
View(grp1.data)
grp1.data[,2] <- round(grp1.data[,2])
View(grp1.data)
grp2.data[,2] <- round(grp2.data[,2])
grp3.data[,2] <- round(grp3.data[,2])
grp4.data[,2] <- round(grp4.data[,2])
View(grp2.data)
write.tree(group1, file='group1.tree')
write.tree(group2, file='group2.tree')
write.tree(group3, file='group3.tree')
write.tree(group4, file='group4.tree')
i<-1
paste("grp",i,".data")
paste("grp",i,".data", sep="")
nrow(paste("grp",i,".data", sep=""))
View(grp3.data)
datasets <- c(grp1.data, grp2.data, grp3.data, grp4.data)
fix(datasets)
datasets[[1]]
datasets <- list()
datasets[[1]] <- grp1.data
datasets <- list()
datasets[[1]] <- grp1.data
datasets[[2]] <- grp2.data
datasets[[3]] <- grp3.data
datasets[[4]] <- grp4.data
names.g <- c("grp1", "grp2", "grp3", "grp4")
datasets <- list()
datasets[[1]] <- grp1.data
datasets[[2]] <- grp2.data
datasets[[3]] <- grp3.data
datasets[[4]] <- grp4.data
names.g <- c("grp1", "grp2", "grp3", "grp4")
for(i in 1:length(datasets)){
foo <- vector()
data <- datasets[[i]]
for(j in 1:nrow(data)){
foo <- paste(foo, ">", data[j,1], "\n", data[j,2], "\n", sep = "")
}
# now write the text file
cat(foo, file= paste(names.g[i], "data.txt")
}
datasets <- list()
datasets[[1]] <- grp1.data
datasets[[2]] <- grp2.data
datasets[[3]] <- grp3.data
datasets[[4]] <- grp4.data
names.g <- c("grp1", "grp2", "grp3", "grp4")
for(i in 1:length(datasets)){
foo <- vector()
data <- datasets[[i]]
for(j in 1:nrow(data)){
foo <- paste(foo, ">", data[j,1], "\n", data[j,2], "\n", sep = "")
}
# now write the text file
cat(foo, file= paste(names.g[i], "data.txt"))
}
View(grp1.data)
for(i in 1: length(names.g)){
params <- paste('_mainType Optimize_Model\n',
'_outDir results\n',
'_dataFile ', names.g[i], ' data.txt\n',
'_treeFile group', i, '.tree\n',
'_maxChrNum -4\n',
'_minChrNum -1\n',
'_simulationsNum 0\n',
'_gainConstR = 1\n',
'_lossConstR = 1\n',
'_duplConstR = 1\n', sep = '')
cat(params, file= paste(names.g[i], 'params.txt', sep="")
}
for(i in 1: length(names.g)){
params <- paste('_mainType Optimize_Model\n',
'_outDir results\n',
'_dataFile ', names.g[i], ' data.txt\n',
'_treeFile group', i, '.tree\n',
'_maxChrNum -4\n',
'_minChrNum -1\n',
'_simulationsNum 0\n',
'_gainConstR = 1\n',
'_lossConstR = 1\n',
'_duplConstR = 1\n', sep = '')
cat(params, file= paste(names.g[i], 'params.txt', sep=""))
}
# now lets set up the parameter files for chromEvol
for(i in 1: length(names.g)){
params <- paste('_mainType Optimize_Model\n',
'_outDir ', names.g[i],'.results\n',
'_dataFile ', names.g[i], ' data.txt\n',
'_treeFile group', i, '.tree\n',
'_maxChrNum -4\n',
'_minChrNum -1\n',
'_simulationsNum 0\n',
'_gainConstR = 1\n',
'_lossConstR = 1\n',
'_duplConstR = 1\n', sep = '')
cat(params, file= paste(names.g[i], 'params.txt', sep=""))
}
fix(group1)
plot(group1, cex=.5)
group1$node.label
group1$node.label <- NULL
write.tree(group1, file='group1.tree')
group2$node.label <- NULL
group3$node.label <- NULL
group4$node.label <- NULL
# now save our resultant tree files in newick format for chomEvol
write.tree(group1, file='group1.tree')
write.tree(group2, file='group2.tree')
write.tree(group3, file='group3.tree')
write.tree(group4, file='group4.tree')
fix(group2)
fix(group2)
View(grp2.data)
#here is the tree for the group
order.tree <- read.nexus('../Hymenoptera analysis/october.files/pruned.tre')
#ugh ok apperently our tree has two species we shouldnt have
order.tree <- drop.tip(order.tree, c('Trigona_clypearis', 'Onychomyrmex_hedleyi'))
#here is the data for the group
data <- read.csv('../Hymenoptera analysis/october.files/pruned.data.csv', as.is=T)
data <- data[,3:5]
row.names(data)<-data[,1]
#so we can use getMRCA to find the nodes for the sub-trees we would like to test
#our tree doesnt have node labels so first we will fix that.
order.tree$node.label<-((length(order.tree$tip)+1):((length(order.tree$tip)*2)-1))
#now we will tell it to most distant relatives in each subtree to get the node
#numbers corresponding to the clade
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Cladius_pectinicornis"))
node.group2 <- getMRCA(order.tree, c("Leptogenys_diminuta", "Amblyopone_australis"))
node.group3 <- getMRCA(order.tree, c("Bombus_lucorum", "Axestotrigona_ferruginea"))
node.group4 <- getMRCA(order.tree, c("Aulacidea_hieracii", "Orthopelma_mediator"))
#now we use those node numbers to extract the part of the tree
#we are interested in.
group1 <- extract.clade(order.tree, node.group1) # n.eu
group2 <- extract.clade(order.tree, node.group2) #   eu
group3 <- extract.clade(order.tree, node.group3) #   eu
group4 <- extract.clade(order.tree, node.group4) # n.eu
#lets check these and make sure they look ok... They do!
plot(group1, cex=.5)
plot(group2, cex=.5)
plot(group3, cex=.5)
plot(group4, cex=.5)
# now we create datasets for each group
grp1.data <- data[data[,1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[,1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[,1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[,1] %in% group4$tip.label, 1:2]
# we will also get rid of NAs
grp1.data <- grp1.data[!is.na(grp1.data[,2]),]
grp2.data <- grp2.data[!is.na(grp2.data[,2]),]
grp3.data <- grp3.data[!is.na(grp3.data[,2]),]
grp4.data <- grp4.data[!is.na(grp4.data[,2]),]
# chromEvol doesnt work with fractional counts so we will round if necc.
grp1.data[,2] <- round(grp1.data[,2])
grp2.data[,2] <- round(grp2.data[,2])
grp3.data[,2] <- round(grp3.data[,2])
grp4.data[,2] <- round(grp4.data[,2])
# before we save our file we have to remove those nodel labels or else
# chromevol will not run
group1$node.label <- NULL
group2$node.label <- NULL
group3$node.label <- NULL
group4$node.label <- NULL
# now save our resultant tree files in newick format for chomEvol
write.tree(group1, file='group1.tree')
write.tree(group2, file='group2.tree')
write.tree(group3, file='group3.tree')
write.tree(group4, file='group4.tree')
# now we need to parse our data on chromosome number in a way that
# will work for chromevol.  This will require a fasta type layout:
#
#  >species_name
#  13
#  >species_name2
#  12
# the numbers should be haploid chromosome counts
# first we will put all 4 dataset into a list
datasets <- list()
datasets[[1]] <- grp1.data
datasets[[2]] <- grp2.data
datasets[[3]] <- grp3.data
datasets[[4]] <- grp4.data
names.g <- c("grp1", "grp2", "grp3", "grp4")
for(i in 1:length(datasets)){
foo <- vector()
data <- datasets[[i]]
for(j in 1:nrow(data)){
foo <- paste(foo, ">", data[j,1], "\n", data[j,2], "\n", sep = "")
}
# now write the text file
cat(foo, file= paste(names.g[i], "data.txt"))
}
# now lets set up the parameter files for chromEvol
for(i in 1: length(names.g)){
params <- paste('_mainType Optimize_Model\n',
'_outDir ', names.g[i],'.results\n',
'_dataFile ', names.g[i], ' data.txt\n',
'_treeFile group', i, '.tree\n',
'_maxChrNum -4\n',
'_minChrNum -1\n',
'_simulationsNum 0\n',
'_gainConstR = 1\n',
'_lossConstR = 1\n',
'_duplConstR = 1\n', sep = '')
cat(params, file= paste(names.g[i], 'params.txt', sep=""))
}
# ok now it is running in Chromevol
plot(group2, cex=.5)
help(treedata)
grp1.data
treedata(group1, grp1.data[,1])
foo <- grp1.data[,2]
names(foo) <- row.names(grp1.data)
group1 <- treedata(group1, foo)
#here is the tree for the group
order.tree <- read.nexus('../Hymenoptera analysis/october.files/pruned.tre')
#here is the data for the group
data <- read.csv('../Hymenoptera analysis/october.files/pruned.data.csv', as.is=T)
data <- data[,3:5]
row.names(data)<-data[,1]
#so we can use getMRCA to find the nodes for the sub-trees we would like to test
#our tree doesnt have node labels so first we will fix that.
order.tree$node.label<-((length(order.tree$tip)+1):((length(order.tree$tip)*2)-1))
#now we will tell it to most distant relatives in each subtree to get the node
#numbers corresponding to the clade
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Cladius_pectinicornis"))
node.group2 <- getMRCA(order.tree, c("Leptogenys_diminuta", "Amblyopone_australis"))
node.group3 <- getMRCA(order.tree, c("Bombus_lucorum", "Axestotrigona_ferruginea"))
node.group4 <- getMRCA(order.tree, c("Aulacidea_hieracii", "Orthopelma_mediator"))
#now we use those node numbers to extract the part of the tree
#we are interested in.
group1 <- extract.clade(order.tree, node.group1) # n.eu
group2 <- extract.clade(order.tree, node.group2) #   eu
group3 <- extract.clade(order.tree, node.group3) #   eu
group4 <- extract.clade(order.tree, node.group4) # n.eu
#lets check these and make sure they look ok... They do!
plot(group1, cex=.5)
plot(group2, cex=.5)
plot(group3, cex=.5)
plot(group4, cex=.5)
# now we create datasets for each group
grp1.data <- data[data[,1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[,1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[,1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[,1] %in% group4$tip.label, 1:2]
# we will also get rid of NAs
grp1.data <- grp1.data[!is.na(grp1.data[,2]),]
grp2.data <- grp2.data[!is.na(grp2.data[,2]),]
grp3.data <- grp3.data[!is.na(grp3.data[,2]),]
grp4.data <- grp4.data[!is.na(grp4.data[,2]),]
# chromEvol doesnt work with fractional counts so we will round if necc.
grp1.data[,2] <- round(grp1.data[,2])
grp2.data[,2] <- round(grp2.data[,2])
grp3.data[,2] <- round(grp3.data[,2])
grp4.data[,2] <- round(grp4.data[,2])
# before we save our file we have to remove those nodel labels or else
# chromevol will not run
group1$node.label <- NULL
group2$node.label <- NULL
group3$node.label <- NULL
group4$node.label <- NULL
treedata(group1, foo)
group1 <- treedata(group1, foo)[[1]]
foo <- grp2.data[,2]
names(foo) <- row.names(grp2.data)
treedata(group2, foo)
aa1 <- treedata(group2, foo)[[1]]
aa1
group2
#here is the tree for the group
order.tree <- read.nexus('../Hymenoptera analysis/october.files/pruned.tre')
#here is the data for the group
data <- read.csv('../Hymenoptera analysis/october.files/pruned.data.csv', as.is=T)
data <- data[,3:5]
row.names(data)<-data[,1]
#so we can use getMRCA to find the nodes for the sub-trees we would like to test
#our tree doesnt have node labels so first we will fix that.
order.tree$node.label<-((length(order.tree$tip)+1):((length(order.tree$tip)*2)-1))
#now we will tell it to most distant relatives in each subtree to get the node
#numbers corresponding to the clade
node.group1 <- getMRCA(order.tree, c("Abia_candens", "Cladius_pectinicornis"))
node.group2 <- getMRCA(order.tree, c("Leptogenys_diminuta", "Amblyopone_australis"))
node.group3 <- getMRCA(order.tree, c("Bombus_lucorum", "Axestotrigona_ferruginea"))
node.group4 <- getMRCA(order.tree, c("Aulacidea_hieracii", "Orthopelma_mediator"))
#now we use those node numbers to extract the part of the tree
#we are interested in.
group1 <- extract.clade(order.tree, node.group1) # n.eu
group2 <- extract.clade(order.tree, node.group2) #   eu
group3 <- extract.clade(order.tree, node.group3) #   eu
group4 <- extract.clade(order.tree, node.group4) # n.eu
#lets check these and make sure they look ok... They do!
plot(group1, cex=.5)
plot(group2, cex=.5)
plot(group3, cex=.5)
plot(group4, cex=.5)
# now we create datasets for each group
grp1.data <- data[data[,1] %in% group1$tip.label, 1:2]
grp2.data <- data[data[,1] %in% group2$tip.label, 1:2]
grp3.data <- data[data[,1] %in% group3$tip.label, 1:2]
grp4.data <- data[data[,1] %in% group4$tip.label, 1:2]
# we will also get rid of NAs
grp1.data <- grp1.data[!is.na(grp1.data[,2]),]
grp2.data <- grp2.data[!is.na(grp2.data[,2]),]
grp3.data <- grp3.data[!is.na(grp3.data[,2]),]
grp4.data <- grp4.data[!is.na(grp4.data[,2]),]
# chromEvol doesnt work with fractional counts so we will round if necc.
grp1.data[,2] <- round(grp1.data[,2])
grp2.data[,2] <- round(grp2.data[,2])
grp3.data[,2] <- round(grp3.data[,2])
grp4.data[,2] <- round(grp4.data[,2])
# before we save our file we have to remove those nodel labels or else
# chromevol will not run
group1$node.label <- NULL
group2$node.label <- NULL
group3$node.label <- NULL
group4$node.label <- NULL
# lets make sure that we dont have any mismatch between the tree and the data
foo <- grp1.data[,2]
names(foo) <- row.names(grp1.data)
group1 <- treedata(group1, foo)[[1]]
foo <- grp2.data[,2]
names(foo) <- row.names(grp2.data)
group2 <- treedata(group2, foo)[[1]]
foo <- grp3.data[,2]
names(foo) <- row.names(grp3.data)
group3 <- treedata(group3, foo)[[1]]
foo <- grp4.data[,2]
names(foo) <- row.names(grp4.data)
group4 <- treedata(group4, foo)[[1]]
# now save our resultant tree files in newick format for chomEvol
write.tree(group1, file='group1.tree')
write.tree(group2, file='group2.tree')
write.tree(group3, file='group3.tree')
write.tree(group4, file='group4.tree')
# now we need to parse our data on chromosome number in a way that
# will work for chromevol.  This will require a fasta type layout:
#
#  >species_name
#  13
#  >species_name2
#  12
# the numbers should be haploid chromosome counts
# first we will put all 4 dataset into a list
datasets <- list()
datasets[[1]] <- grp1.data
datasets[[2]] <- grp2.data
datasets[[3]] <- grp3.data
datasets[[4]] <- grp4.data
names.g <- c("grp1", "grp2", "grp3", "grp4")
for(i in 1:length(datasets)){
foo <- vector()
data <- datasets[[i]]
for(j in 1:nrow(data)){
foo <- paste(foo, ">", data[j,1], "\n", data[j,2], "\n", sep = "")
}
# now write the text file
cat(foo, file= paste(names.g[i], "data.txt"))
}
# now lets set up the parameter files for chromEvol
for(i in 1: length(names.g)){
params <- paste('_mainType Optimize_Model\n',
'_outDir ', names.g[i],'.results\n',
'_dataFile ', names.g[i], ' data.txt\n',
'_treeFile group', i, '.tree\n',
'_maxChrNum -4\n',
'_minChrNum -1\n',
'_simulationsNum 0\n',
'_gainConstR = 1\n',
'_lossConstR = 1\n',
'_duplConstR = 1\n', sep = '')
cat(params, file= paste(names.g[i], 'params.txt', sep=""))
}
setwd("~/Desktop/mypack/GIT/evobir/inst/wf.model")
runApp()
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
runApp()
