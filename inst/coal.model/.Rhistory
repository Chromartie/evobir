foo(112)
foo(113)
foo(114)
foo(115)
foo(116)
foo(117)
foo(118)
foo(119)
foo(120)
foo(121)
foo(122)
foo(123)
foo(124)
foo(125)
foo(126)
foo(127)
foo(128)
foo(129)
foo(130)
foo(131)
foo(132)
foo(133)
foo(52)
foo(75)
foo(85)
foo(87)
foo(103)
foo(106)
foo(109)
foo(131)
foo(132)
plot(tree, show.tip.label=F)                      # plot check
foo(52)
plot(tree, show.tip.label=F)                      # plot check
tree <- pbtree(b=1, n=10, scale=5) # make tree
tree
fix(tree)
tree$edge
fix(tree)
tree$Nnode
fix(tree)
help(read.nexus)
fix(tree)
tree$edge.length
boo <- cbind(tree$edge, tree$edge.length)
View(boo)
plot(tree)
View(boo)
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips > 50) | length(chosen.tips < 20)){
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1)              # make tree
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips > 50) | length(chosen.tips < 20)){
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
stretched.tree <- tree.stretch(equal.tree)
tree <- equal.tree
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
fix(nodes)
fix(chosen.tips)
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
chosen.tips <- 0
while(length(chosen.tips > 50) | length(chosen.tips < 20)){
chosen.tips <- tips(tree, sample(nodes, 1))                                # monophyletic set of tips
}
chosen.tips <- 0
while(length(chosen.tips > 50) | length(chosen.tips < 20)){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
print(length(chosen.tips))
}
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree)
plot(stretched.tree)
plot(stretched.tree, show.tip.label = F)
plot(equal.tree, show.tip.label = F)
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree, show.tip.label = F)
plot(stretched.tree, show.tip.label = F)
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree, show.tip.label = F)
plot(stretched.tree, show.tip.label = F)
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree, show.tip.label = F)
plot(stretched.tree, show.tip.label = F)
par(mfcol=c(3,2))
for(i in 1:6){
stretched.tree <- tree.stretch(equal.tree)
plot(stretched.tree, show.tip.label = F)
}
par(mfcol=c(3,3))
for(i in 1:9){
stretched.tree <- tree.stretch(equal.tree)
plot(stretched.tree, show.tip.label = F)
}
q3 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
q2 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
library(devtools)
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
help(pbtree)
plot.phylo(tree, show.tip.labels=F)
plot.phylo(tree, show.tip.label=F)
## put the call to create the plot here
plot.phylo(tree, show.tip.label=F)
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("bd.trees.model")
ViewEvo("bd.trees.model")
ViewEvo("wf.model")
ViewEvo("bd.trees.model")
ViewEvo("bd.model")
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("bd.model")
pbtree(n=10,b=.1,d=0)
setwd("~/Desktop/mypack/GIT/evobir/inst/bd.model")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ViewEvo("bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
setwd("~/Desktop/mypack/GIT/evobir/inst/bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
equal.tree <- pbtree(b=1, n=100, scale=1)              # make tree
fix(equal.tree)
runApp()
runApp()
help(martext)
runApp()
help(mtext)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/mypack/GIT/evobir/inst/coal.model")
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
CoalSim(census = 10, lw = 2, ln.col = 'blue')
foo <- sample(1:100, 100, replace = T)
fix(foo)
plot(foo)
genomes <- matrix(,10,100)
genomes <- matrix(,10,100)
for(i in 1:10){
genomes[i, ] <- sample(1:100, 100, replace = T)
}
View(genomes)
genomes <- matrix(,10,100)
for(i in 1:10){
genomes[i, ] <- sample(1:100, 100, replace = T)/100
}
View(genomes)
prod(genomes[1,])
sum(genomes[1,])
genomes <- matrix(,1000,100)
for(i in 1:1000){
genomes[i, ] <- sample(1:100, 100, replace = T)/100
}
View(genomes)
foo <- vector()
for(i in 1:1000){
foo[i] <- sum(genomes[i,])
}
plot(foo)
hist(foo)
for(i in 1:1000){
foo[i] <- prod(genomes[i,])
}
hist(foo)
max(foo)
library(phytools)
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1)              # make tree
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 50 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree, show.tip.label = F)
plot(stretched.tree, show.tip.label = F)
par(mfcol=c(3,3))
for(i in 1:9){
stretched.tree <- tree.stretch(equal.tree)
plot(stretched.tree, show.tip.label = F)
}
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 70 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
stretched.tree <- tree.stretch(equal.tree)
par(mfcol=c(1,2))
plot(equal.tree, show.tip.label = F)
plot(stretched.tree, show.tip.label = F)
par(mfcol=c(3,3))
for(i in 1:9){
stretched.tree <- tree.stretch(equal.tree)
plot(stretched.tree, show.tip.label = F)
}
par(mfcol=c(3,3))
for(i in 1:9){
stretched.tree <- tree.stretch(equal.tree)
plot(stretched.tree, show.tip.label = F)
}
st.tree <- list()
for(i in 1:10){
st.tree[[i]] <- tree.stretch(equal.tree)
}
plot(st.tree[[1]])
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 70 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1)              # make tree
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
ViewEvo("bd.model")
ViewEvo("bd.model")
q3 <- list(rbind(c(-.25, .25), c(.4, -.4))
q2 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
q3 <- list(rbind(c(-.25, .25), c(.4, -.4)))
q2 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
stable.tips2 <- sim.char(tree, q2, model = "discrete", n=10)
stable.tips2 <- sim.char(equal.tree, q2, model = "discrete", n=10)
stable.tips3 <- sim.char(equal.tree, q3, model = "discrete", n=10)
st.tree <- list()
for(i in 1:10){
st.tree[[i]] <- tree.stretch(equal.tree)
}
var.tips2 <- list()
var.tips3 <- list()
for(i in 1:10)){
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
}
var.tips2 <- list()
var.tips3 <- list()
for(i in 1:10){
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
}
i<-1
var.tips2 <- list()
var.tips3 <- list()
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
i<-2
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
var.tips2 <- list()
var.tips3 <- list()
for(i in 1:10){
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
}
foo <- ace(equal.tree, tips2)
foo <- ace(equal.tree, stable.tips2)
foo <- ace(stable.tips2, equal.tree)
library(phytools)
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1 extant.only = T)              # make tree
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1, extant.only = T)              # make tree
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 70 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
st.tree <- list()
for(i in 1:10){
st.tree[[i]] <- tree.stretch(equal.tree)
}
# get tips
library(geiger)
q3 <- list(rbind(c(-.25, .25), c(.4, -.4)))
q2 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
stable.tips2 <- sim.char(equal.tree, q2, model = "discrete", n=10)
stable.tips3 <- sim.char(equal.tree, q3, model = "discrete", n=10)
var.tips2 <- list()
var.tips3 <- list()
for(i in 1:10){
var.tips2[[i]] <- sim.char(st.tree[[i]], q2, model = "discrete", n=10)
var.tips3[[i]] <- sim.char(st.tree[[i]], q3, model = "discrete", n=10)
}
# calculate the q-matrix
foo <- ace(stable.tips2, equal.tree)
tree.stretch <- function(tree){
nodes <- tree$node.label <- ((length(tree$tip) + 1):((length(tree$tip) * 2) - 1))  # name nodes
chosen.tips <- 0
while(length(chosen.tips) > 70 | length(chosen.tips) < 20){
chosen.tips <- tips(tree, sample(nodes, 1))  # monophyletic set of tips
}
chosen.edges <- which.edge(tree, chosen.tips)                              # branches to change
tree$edge.length[chosen.edges] <- 2 * tree$edge.length[chosen.edges]
return(tree)
}
set.seed(9)
equal.tree <- pbtree(b=1, n=100, scale=1, extant.only = T)              # make tree
st.tree <- tree.stretch(equal.tree)
fix(st.tree)
fix(equal.tree)
help(ace)
q3 <- list(rbind(c(-.25, .25), c(.4, -.4)))
q2 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
stable.tips2 <- sim.char(equal.tree, q2, model = "discrete", n=10)
stable.tips3 <- sim.char(equal.tree, q3, model = "discrete", n=10)
foo <- ace(stable.tips2, equal.tree)
stable.tips2
foo <- ace(stable.tips2[,1], equal.tree)
stable.tips2 <- sim.char(equal.tree, q2, model = "discrete", n=1)
stable.tips3 <- sim.char(equal.tree, q3, model = "discrete", n=1)
foo <- ace(stable.tips2, equal.tree)
foo <- ace(stable.tips2, equal.tree, type = "disc")
fix(foo)
foo <- ace(stable.tips2, equal.tree, type = "disc", model = "ARD")
fix(foo)
foo <- ace(stable.tips2, equal.tree, type = "disc", model = "ARD")
foo <- ace(stable.tips3, equal.tree, type = "disc", model = "ARD")
fix(foo)
q2 <- list(rbind(c(-.25, .25), c(.4, -.4)))
q3 <- list(rbind(c(-.5, .25, .25), c(.4, -.8, .4), c(.6, .6, -1.2)))
stable.tips2 <- sim.char(equal.tree, q2, model = "discrete", n=1)
stable.tips3 <- sim.char(equal.tree, q3, model = "discrete", n=1)
# calculate the q-matrix
foo <- ace(stable.tips3, equal.tree, type = "disc", model = "ARD")
