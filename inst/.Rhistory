tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
set.seed=1
tree <- pbtree(b=1,d=.2,n=30, extant.only=T)
plot(tree)
tip.data <- sim.char(tree,.08)
tips <- tip.data
names(tips) <- row.names(tip.data)
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
foo <- contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
foo[1]
foo[2]
foo[3]
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
lastPP$xx
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1)
colors <- c("black", "white")
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=19,col=colors[tip.col[i]])
}
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=21,col=colors[tip.col[i]])
}
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=sym[tip.col],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=sym[tip.col],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=sym[tip.col])
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.2, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.1, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
for(i in 1:30){
points(x=lastPP$xx[i]+.05, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.03, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,2,1,2,1,1,1,1,2,2,1,1,1,2,1,2,2,1,2,1,1,1,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,2,1,2,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,1,1,2,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
for(i in 31:35){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=16,col="black")
}
lastPP$xx
59-31
node.cols <- rep("blue", times=28)
node.cols <- rep("blue", times=28)
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols[c(8,11)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(9,13)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13,19,23)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13,20,23)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13,20,23,28)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,1,1,2,2,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13,20,23,28)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,1,2,2,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,13,20,23,28)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,12,20,23,28)] <- "red"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
node.cols[13] <- "black"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30])
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,1,2,2,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(16, 21)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,12,20,23,28)] <- "red"
node.cols[13] <- "black"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30],cex=1.3)
}
contMap(tree, tips, lwd=5,legend=T,outline=F, fsize=.01)
lastPP<-get("last_plot.phylo",envir=.PlotPhyloEnv)
tip.col <- c(1,1,1,1,2,1,1,1,2,2,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1)
sym <- c(21,16)
for(i in 1:30){
points(x=lastPP$xx[i]+.035, y=lastPP$yy[i], pch=sym[tip.col[i]],col="black")
}
node.cols <- rep("blue", times=29)
node.cols[c(3,9,12,20,23,28)] <- "red"
node.cols[13] <- "black"
for(i in 31:59){
points(x=lastPP$xx[i], y=lastPP$yy[i], pch=15,col=node.cols[i-30],cex=1.3)
}
save.image("~/Desktop/Dropbox/papers/evobiR/plotting.example.RData")
help(sample)
foo <- (6,10,20,25,55,80,89)
foo <- c(6,10,20,25,55,80,89)
foo <- c(6,10,20,35,55,80,89, 90)
plot(foo)
foo <- c(6,10,20,35,55,70, 80,89, 90)
plot(foo)
foo <- c(6,10,20,35,55,70, 80,89, 90)
plot(foo)
foo <- c(6,8,10,20,35,55,70, 80,89, 90)
foo <- c(6,8,10,20,35,55,70, 80,89, 90)
plot(foo)
foo <- c(6, 8, 10, 20, 35, 55, 70, 80, 82, 81)
plot(foo)
foo <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
foo <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
foo <- c(10, 9, 8, 8, 6, 5, 4, 3, 2, 1)
p.mean <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
p.sd <- c(10, 9, 8, 8, 6, 5, 4, 3, 2, 1)
p.mean <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
p.sd <- c(10, 9, 8, 8, 6, 5, 4, 3, 2, 1)
help(rnorm)
round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i], ))
round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i]))
i <- 1
round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i]))
help(sample)
sample(1:20, size=100)
sample(1:20, size=100, replace=T)
a <- round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i]))
b <- sample(1:20, size=100, replace=T)
p.mean <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
p.sd <- c(10, 9, 8, 8, 6, 5, 4, 3, 2, 1)
results <- list()
for(i in 1:10){
a <- round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i]))
b <- sample(1:20, size=100, replace=T)
levels <- matrix(c(a,b),100,2)
results[[i]] <- levels
}
help(rep)
rep(10)
rep(10, times=1-)
rep(10, times=10)
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100), y=results[[i]][,1])
}
p.mean <- c(50, 48, 40, 30, 20, 10, 11, 9, 10, 7)
p.sd <- c(15, 10, 8, 8, 6, 5, 4, 3, 2, 1)
results <- list()
for(i in 1:10){
a <- round(rnorm(n=100, mean=p.mean[i], sd=p.sd[i]))
b <- sample(1:20, size=100, replace=T)
levels <- matrix(c(a,b),100,2)
results[[i]] <- levels
}
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100), y=results[[i]][,1])
}
i <-1
results[[i]][,2]
min.orig <- max.orig <- vector()
for(i in 1:10){
min.orig[i] <- min(results[[i]][,2])
max.orig[i] <- max(results[[i]][,2])
}
min.orig <- min(min.orig)
max.orig <- max(max.orig)
colors <- rainbow(20)
#first lets find the range of originating nodes
min.orig <- max.orig <- vector()
for(i in 1:10){
min.orig[i] <- min(results[[i]][,2])
max.orig[i] <- max(results[[i]][,2])
}
min.orig <- min(min.orig)
max.orig <- max(max.orig)
colors <- rainbow(20)
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100), y=results[[i]][,1], col=colors[results[[i]][,2]])
}
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100),
y=results[[i]][,1],
col=colors[results[[i]][,2]],
pch=15)
}
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100),
y=results[[i]][,1],
col=colors[results[[i]][,2]],
pch=13)
}
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100),
y=results[[i]][,1],
col=colors[results[[i]][,2]],
pch=16)
}
plot(x=0,y=0, col="white", xlim=c(0,10), ylim=c(0,100))
for(i in 1:10){
points(x=rep(i, times=100),
y=results[[i]][,1],
col=colors[results[[i]][,2]],
pch=16, cex=.5)
}
setwd("~/Desktop")
alignment <- "1.fasta"
win.size = 100
step.size = 100
boot = F
replicates = 100
alignment <- read.alignment(alignment, format = "fasta")                         #  read in the alignment
library(ape)
alignment <- read.alignment(alignment, format = "fasta")                         #  read in the alignment
library(seqinr)
alignment <- read.alignment(alignment, format = "fasta")                         #  read in the alignment
alignment.matrix <- matrix(, length(alignment$nam), nchar(alignment$seq[[1]]))    #  make a matrix for the alignment
for(i in 1:length(alignment$nam)){
alignment.matrix[i, ] <- unlist(strsplit(alignment$seq[[i]], ""))               #  fill in the matrix
}
View(alignment.matrix)
alignment$nam
for(i in 1:length(alignment$nam)){
alignment.matrix[i, ] <- unlist(strsplit(alignment$seq[[i]], ""))               #  fill in the matrix
}
View(alignment.matrix)
full.align <- alignment.matrix
ncol(full.align)
ncol(full.align)/win.size
help(round)
floor(4.16)
source("WinCalcD.R")
source("WinCalcD.R")
foo <- WinCalcD.R(alignment <- "1.fasta", win.size = 100, boot = F, replicates = 100)
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = F, replicates = 100)
source("WinCalcD.R")
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = F, replicates = 100)
foo
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = T, replicates = 100)
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = T, replicate = 100)
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = T, replicate = 100)
source("WinCalcD.R")
foo <- WinCalcD(alignment <- "1.fasta", win.size = 100, boot = T, replicate = 100)
foo
library(devtools)
install_github("coleoguy/evobir")
library(evobiR)
install_github("coleoguy/evobir")
library(evobiR)
install_github("coleoguy/evobir")
library(evobiR)
ViewEvo("dist.model")
CalcD(alignment = system.file("1.fasta", package = "evobiR"), boot = TRUE, replicate=10)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100, boot = TRUE, replicate=10)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=50, boot = TRUE, replicate=10)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=57, boot = TRUE, replicate=10)
foo <- alignment <- read.alignment(system.file("1.fasta", package = "evobiR"), format = "fasta")
foo <- read.alignment(system.file("1.fasta", package = "evobiR"), format = "fasta")
alignment <- read.alignment(system.file("1.fasta", package = "evobiR"), format = "fasta")
alignment.matrix <- matrix(, length(alignment$nam), nchar(alignment$seq[[1]]))    #  make a matrix for the alignment
for(i in 1:length(alignment$nam)){
alignment.matrix[i, ] <- unlist(strsplit(alignment$seq[[i]], ""))               #  fill in the matrix
}
View(alignment.matrix)
help(sample)
foo <- alignment[,sample(1:416), size=1000, replace=T]
foo <- alignment[sample(1:416), size=1000, replace=T]
foo <- alignment[,sample(1:416), size=1000, replace=T)]
foo <- alignment[,sample(1:416, size=1000, replace=T)]
sample(1:416, size=1000, replace=T)
foo <- alignment[,c(sample(1:416, size=1000, replace=T))]
bar <- c(sample(1:416, size=1000, replace=T))
foo <- alignment.matrix[,sample(1:416, size=1000, replace=T)]
setwd("~/Desktop")
write.csv(foo, file="here.csv")
setwd("~/Desktop/mypack/GIT/evobir/inst")
foo <- WinCalcD(alignment <- "1a.fasta", win.size = 100, boot = T, replicate = 100)
View(foo)
install_github("coleoguy/evobir")
library(evobiR)
install_github("coleoguy/evobir")
library(evobiR)
install_github("coleoguy/evobir")
library(evobiR)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
install_github("coleoguy/evobir")
library(evobiR)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
install_github("coleoguy/evobir")
library(evobiR)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
alignment = system.file("1.fasta", package = "evobiR")
win.size=100
step.size = 50
boot = TRUE
replicate=10
alignment <- read.alignment(alignment, format = "fasta")                         #  read in the alignment
alignment.matrix <- matrix(, length(alignment$nam), nchar(alignment$seq[[1]]))    #  make a matrix for the alignment
for(i in 1:length(alignment$nam)){
alignment.matrix[i, ] <- unlist(strsplit(alignment$seq[[i]], ""))               #  fill in the matrix
}
full.align <- alignment.matrix
total <- ncol(full.align)
spots <- seq(from = 1, to = (total - win.size), by = step.size)
results.matrix <- as.data.frame(matrix(,1,6))
colnames(results.matrix) <- c("range", "abba", "baba", "d", "Z", "pval")
length(spots)
q <-1
alignment.matrix <- full.align[spots[q]:(spots[q] + win.size - 1)]
alignment.matrix <- full.align[,spots[q]:(spots[q] + win.size - 1)]
install_github("coleoguy/evobir")
library(evobiR)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
install_github("coleoguy/evobir")
library(evobiR)
WinCalcD(alignment = system.file("1.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
foo <- WinCalcD(alignment = system.file("1a.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = TRUE, replicate=10)
View(foo)
foo2 <- WinCalcD(alignment = system.file("1a.fasta", package = "evobiR"), win.size=100,
step.size = 50, boot = F, replicate=10)
View(foo2)
foo2 <- WinCalcD(alignment = system.file("1a.fasta", package = "evobiR"), win.size=102,
step.size = 50, boot = F, replicate=10)
View(foo2)
