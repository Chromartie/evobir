## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:10, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sample(1:census, length(unique(history[, (counter)])) - 1, replace = T)
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:10, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sample(1:census, length(unique(history[, (counter)])) - 1, replace = T)
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sample(1:census, length(unique(history[, (counter)])) - 1, replace = T)
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
View(history)
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 25
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
View(history)
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foo,(foo+1)), history[i,foo:(foo+1)])
foo <- foo + 2
}
}
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
i<-1
foo <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foo,(foo+1)), history[i,foo:(foo+1)])
}
foo <- foo + 2
}
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 50
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 40
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 20
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
library(devtools)
install.packages("devtools")
library(devtools)
install_github("evobiR")
help(install_github)
install_github("evobiR", username='coleoguy')
install_git("evobiR", username='coleoguy')
install.packages('LearnBayes')
install.packages('evobiR')
install.packages("ape")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library("evobiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
foo <- data(mite)
data(mite)
load(mite.data)
data(mite.data)
rownames(mite.data)
install.packages("markovjumps")
install.packages("~/Desktop/mypack/example.R.packages/markovjumps.tar.gz", repos = NULL, type = "source")
chromosomes <- 23
ploidy <- 2
results <- vector()
for(i in 1:chromosomes){
results[i] <- chromosomes^ploidy
}
plot(results)
results <- vector()
for(i in 1:chromosomes){
results[i] <- i^ploidy
}
plot(results)
plot(results, lty=1)
plot(results, lty=2)
plot(results, lty=3)
help(plot)
plot(results, type='l')
install_github("evobir", username='coleoguy')
library(devtools)
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
setwd("~/Desktop/mypack/GIT/evobir/inst/wf.model")
runApp()
library(shiny)
runApp()
runApp()
setwd("~/Desktop/mypack/GIT/evobir/inst/wf.model/test")
ShinyPopGen <- function(fitness, initial.A, pop, gen, var.plot, iter, heath, qAa, qaA, popD){
results <- matrix(,iter,gen)
results2 <- matrix(, iter, gen)
pop2 <- vector()
for(k in 1:iter){                             # this loop goes through the iterations
adults <- c(rep(1, each = round(pop*initial.A^2)),
rep(2, each = round(pop*2*initial.A*{1-initial.A})),
rep(3, each = round(pop*{1-initial.A}^2)))
plot.val <- vector()
pop.val <- vector()
for(i in 1:gen){                            # this loop goes through the generations
A <- (2 * sum(adults == 1) + sum(adults ==2)) / {pop*2}
if(qAa + qaA != 0) A <- A + {{1 - A} * qaA} - {A * qAa}
if(i == 1) pop2 <- pop
if(popD != 0) pop2 <- pop2 + runif(1, min = -popD, max= popD)
if(pop2 < 10) pop2 <- 10
#print(paste("gen:",i, "\npop2:",pop2, "A:", A))
babies <-  c(rep(1, each = round(pop2*A^2)),
rep(2, each = round(pop2*2*A*{1-A})),
rep(3, each = round(pop2*(1-A)^2)))
pop.fit <- vector(length = length(babies))                       # fitness for each offspring
pop.fit[babies == 1] <- fitness[1]
pop.fit[babies == 2] <- fitness[2]
pop.fit[babies == 3] <- fitness[3]
adults <- sample(babies, pop2, replace = T, prob = pop.fit)
AA <- sum(adults == 1)
Aa <- sum(adults == 2)
plot.val[i] <- AA + .5 * Aa
pop.val[i] <- pop2
}
results[k,] <- plot.val
results2[k,] <- pop.val
}
return(list(freq=results, pops=results2)
}
ShinyPopGen <- function(fitness, initial.A, pop, gen, var.plot, iter, heath, qAa, qaA, popD){
results <- matrix(,iter,gen)
results2 <- matrix(, iter, gen)
pop2 <- vector()
for(k in 1:iter){                             # this loop goes through the iterations
adults <- c(rep(1, each = round(pop*initial.A^2)),
rep(2, each = round(pop*2*initial.A*{1-initial.A})),
rep(3, each = round(pop*{1-initial.A}^2)))
plot.val <- vector()
pop.val <- vector()
for(i in 1:gen){                            # this loop goes through the generations
A <- (2 * sum(adults == 1) + sum(adults ==2)) / {pop*2}
if(qAa + qaA != 0) A <- A + {{1 - A} * qaA} - {A * qAa}
if(i == 1) pop2 <- pop
if(popD != 0) pop2 <- pop2 + runif(1, min = -popD, max= popD)
if(pop2 < 10) pop2 <- 10
#print(paste("gen:",i, "\npop2:",pop2, "A:", A))
babies <-  c(rep(1, each = round(pop2*A^2)),
rep(2, each = round(pop2*2*A*{1-A})),
rep(3, each = round(pop2*(1-A)^2)))
pop.fit <- vector(length = length(babies))                       # fitness for each offspring
pop.fit[babies == 1] <- fitness[1]
pop.fit[babies == 2] <- fitness[2]
pop.fit[babies == 3] <- fitness[3]
adults <- sample(babies, pop2, replace = T, prob = pop.fit)
AA <- sum(adults == 1)
Aa <- sum(adults == 2)
plot.val[i] <- AA + .5 * Aa
pop.val[i] <- pop2
}
results[k,] <- plot.val
results2[k,] <- pop.val
}
return(list(freq=results, pops=results2))
}
gen.exp <- function(x, y, wAA, wAa, waa, qAa, qaA){
foo <- vector()
A <- x
AA <- A^2       #p2
Aa <- 2*A*(1-A) #2pq
aa <- (1-A)^2   #q2
for(i in 1:y){
w.bar <- AA*wAA + Aa*wAa + aa*waa  #mean fitness
AA <- AA * (wAA / w.bar)
Aa <- Aa * (wAa / w.bar)
aa <- aa * (waa / w.bar)
foo[i] <- A <- (AA + .5*Aa)
if(qAa + qaA != 0) A <- A + {{1 - A} * qaA} - {A * qAa} #
AA <- A^2
Aa <- 2*A*(1-A)
aa <- (1-A)^2
}
return(foo)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/mypack/GIT/evobir/inst/wf.model")
runApp()
runApp()
setwd("~/Desktop/mypack/GIT/evobir/inst/bd.model")
runApp()
